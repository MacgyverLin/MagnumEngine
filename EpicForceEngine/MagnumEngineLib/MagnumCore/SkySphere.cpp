///////////////////////////////////////////////////////////////////////////////////
// Copyright(c) 2016, Lin Koon Wing Macgyver, macgyvercct@yahoo.com.hk			 //
//																				 //
// Author : Mac Lin									                             //
// Module : Magnum Engine v1.0.0												 //
// Date   : 14/Jun/2016											                 //
//																				 //
///////////////////////////////////////////////////////////////////////////////////
#include "Stage.h"
#include "SkySphere.h"
#include "SkySphereRenderer.h"

const SkySphere::Vertex vertices[] =
{
	{	0.188255f, -0.900969f, -0.390916f, 0.928571f, 0.856139f,		},
	{	0.000000f, -0.900969f, -0.433884f, 1.000000f, 0.856139f, 		},
	{	0.339224f, -0.623490f, -0.704406f, 0.928571f, 0.713282f, 		},
	{	0.000000f, -0.623490f, -0.781832f, 1.000000f, 0.713282f, 		},
	{	0.339224f, -0.900969f, -0.270522f, 0.857143f, 0.856139f, 		},
	{	0.611261f, -0.623490f, -0.487464f, 0.857143f, 0.713282f, 		},
	{	0.423006f, -0.900969f, -0.096548f, 0.785714f, 0.856139f, 		},
	{	0.762229f, -0.623490f, -0.173974f, 0.785714f, 0.713282f, 		},
	{	0.423006f, -0.900969f, 0.096548f, 0.714286f, 0.856139f, 		},
	{	0.762229f, -0.623490f, 0.173974f, 0.714286f, 0.713282f, 		},
	{	0.339224f, -0.900969f, 0.270522f, 0.642857f, 0.856139f, 		},
	{	0.611261f, -0.623490f, 0.487464f, 0.642857f, 0.713282f, 		},
	{	0.188255f, -0.900969f, 0.390916f, 0.571429f, 0.856139f, 		},
	{	0.339224f, -0.623490f, 0.704406f, 0.571429f, 0.713282f, 		},
	{	0.000000f, -0.900969f, 0.433884f, 0.500000f, 0.856139f, 		},
	{	0.000000f, -0.623490f, 0.781832f, 0.500000f, 0.713282f, 		},
	{	-0.188255f, -0.900969f, 0.390916f, 0.428571f, 0.856139f, 		},
	{	-0.339224f, -0.623490f, 0.704406f, 0.428571f, 0.713282f, 		},
	{	-0.339224f, -0.900969f, 0.270522f, 0.357143f, 0.856139f, 		},
	{	-0.611261f, -0.623490f, 0.487464f, 0.357143f, 0.713282f, 		},
	{	-0.423005f, -0.900969f, 0.096548f, 0.285714f, 0.856139f, 		},
	{	-0.762229f, -0.623490f, 0.173973f, 0.285714f, 0.713282f, 		},
	{	-0.423005f, -0.900969f, -0.096549f, 0.214286f, 0.856139f, 		},
	{	-0.762229f, -0.623490f, -0.173974f, 0.214286f, 0.713282f, 		},
	{	-0.339224f, -0.900969f, -0.270522f, 0.142857f, 0.856139f, 		},
	{	-0.611260f, -0.623490f, -0.487465f, 0.142857f, 0.713282f, 		},
	{	-0.188255f, -0.900969f, -0.390916f, 0.071428f, 0.856139f, 		},
	{	-0.339223f, -0.623490f, -0.704406f, 0.071428f, 0.713282f, 		},
	{	0.000000f, -0.900969f, -0.433884f, 0.000000f, 0.856139f, 		},
	{	0.000000f, -0.623490f, -0.781832f, 0.000000f, 0.713282f, 		},
	{	0.000000f, -0.623490f, -0.781832f, 1.000000f, 0.713282f, 		},
	{	0.423005f, -0.222521f, -0.878380f, 0.928571f, 0.570425f, 		},
	{	0.000000f, -0.222521f, -0.974928f, 1.000000f, 0.570425f, 		},
	{	0.762229f, -0.222521f, -0.607858f, 0.857143f, 0.570425f, 		},
	{	0.950484f, -0.222521f, -0.216942f, 0.785714f, 0.570425f, 		},
	{	0.950485f, -0.222521f, 0.216942f, 0.714286f, 0.570425f, 		},
	{	0.762229f, -0.222521f, 0.607857f, 0.642857f, 0.570425f, 		},
	{	0.423006f, -0.222521f, 0.878380f, 0.571429f, 0.570425f, 		},
	{	0.000000f, -0.222521f, 0.974928f, 0.500000f, 0.570425f, 		},
	{	-0.423006f, -0.222521f, 0.878380f, 0.428571f, 0.570425f, 		},
	{	-0.762229f, -0.222521f, 0.607857f, 0.357143f, 0.570425f, 		},
	{	-0.950485f, -0.222521f, 0.216942f, 0.285714f, 0.570425f, 		},
	{	-0.950484f, -0.222521f, -0.216942f, 0.214286f, 0.570425f, 		},
	{	-0.762229f, -0.222521f, -0.607858f, 0.142857f, 0.570425f, 		},
	{	-0.423005f, -0.222521f, -0.878380f, 0.071428f, 0.570425f, 		},
	{	0.000000f, -0.222521f, -0.974928f, 0.000000f, 0.570425f, 		},
	{	0.042688f, -0.995148f, -0.088642f, 0.928571f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.928571f, 0.996473f, 		},
	{	0.000000f, -0.995148f, -0.098385f, 1.000000f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 1.000000f, 0.996473f, 		},
	{	0.076920f, -0.995148f, -0.061342f, 0.857143f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.857143f, 0.996473f, 		},
	{	0.095918f, -0.995148f, -0.021893f, 0.785714f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.785714f, 0.996473f, 		},
	{	0.095918f, -0.995148f, 0.021893f, 0.714286f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.714286f, 0.996473f, 		},
	{	0.076920f, -0.995148f, 0.061342f, 0.642857f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.642857f, 0.996473f, 		},
	{	0.042688f, -0.995148f, 0.088641f, 0.571429f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.571429f, 0.996473f, 		},
	{	0.000000f, -0.995148f, 0.098385f, 0.500000f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.500000f, 0.996473f, 		},
	{	-0.042687f, -0.995148f, 0.088641f, 0.428571f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.428571f, 0.996473f, 		},
	{	-0.076920f, -0.995148f, 0.061342f, 0.357143f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.357143f, 0.996473f, 		},
	{	-0.095918f, -0.995148f, 0.021893f, 0.285714f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.285714f, 0.996473f, 		},
	{	-0.095918f, -0.995148f, -0.021893f, 0.214286f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.214286f, 0.996473f, 		},
	{	-0.076920f, -0.995148f, -0.061342f, 0.142857f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.142857f, 0.996473f, 		},
	{	-0.042687f, -0.995148f, -0.088642f, 0.071428f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.071428f, 0.996473f, 		},
	{	0.000000f, -0.995148f, -0.098385f, 0.000000f, 0.954727f, 		},
	{	0.000000f, -1.000000f, -0.000000f, 0.000000f, 0.996473f, 		},
	{	0.000000f, -0.900969f, -0.433884f, 1.000000f, 0.856139f, 		},
	{	0.000000f, -0.973605f, -0.228240f, 1.000000f, 0.924233f, 		},
	{	0.099030f, -0.973605f, -0.205637f, 0.928571f, 0.924233f, 		},
	{	0.178445f, -0.973605f, -0.142305f, 0.857143f, 0.924233f, 		},
	{	0.222518f, -0.973605f, -0.050788f, 0.785714f, 0.924233f, 		},
	{	0.222518f, -0.973605f, 0.050788f, 0.714286f, 0.924233f, 		},
	{	0.178445f, -0.973605f, 0.142305f, 0.642857f, 0.924233f, 		},
	{	0.099030f, -0.973605f, 0.205637f, 0.571429f, 0.924233f, 		},
	{	0.000000f, -0.973605f, 0.228240f, 0.500000f, 0.924233f, 		},
	{	-0.099029f, -0.973605f, 0.205637f, 0.428571f, 0.924233f, 		},
	{	-0.178445f, -0.973605f, 0.142305f, 0.357143f, 0.924233f, 		},
	{	-0.222517f, -0.973605f, 0.050788f, 0.285714f, 0.924233f, 		},
	{	-0.222517f, -0.973605f, -0.050788f, 0.214286f, 0.924233f, 		},
	{	-0.178445f, -0.973605f, -0.142305f, 0.142857f, 0.924233f, 		},
	{	-0.099029f, -0.973605f, -0.205637f, 0.071428f, 0.924233f, 		},
	{	0.000000f, -0.973605f, -0.228240f, 0.000000f, 0.924233f, 		},
	{	-0.188255f, 0.900969f, -0.390916f, 0.071429f, 0.142857f, 		},
	{	-0.000000f, 0.900969f, -0.433884f, -0.000000f, 0.142857f, 		},
	{	-0.339224f, 0.623490f, -0.704406f, 0.071429f, 0.285714f, 		},
	{	-0.000000f, 0.623490f, -0.781832f, -0.000000f, 0.285714f, 		},
	{	-0.339224f, 0.900969f, -0.270522f, 0.142857f, 0.142857f, 		},
	{	-0.611260f, 0.623490f, -0.487464f, 0.142857f, 0.285714f, 		},
	{	-0.423005f, 0.900969f, -0.096548f, 0.214286f, 0.142857f, 		},
	{	-0.762229f, 0.623490f, -0.173974f, 0.214286f, 0.285714f, 		},
	{	-0.423005f, 0.900969f, 0.096548f, 0.285714f, 0.142857f, 		},
	{	-0.762229f, 0.623490f, 0.173974f, 0.285714f, 0.285714f, 		},
	{	-0.339224f, 0.900969f, 0.270522f, 0.357143f, 0.142857f, 		},
	{	-0.611261f, 0.623490f, 0.487464f, 0.357143f, 0.285714f, 		},
	{	-0.188255f, 0.900969f, 0.390916f, 0.428571f, 0.142857f, 		},
	{	-0.339224f, 0.623490f, 0.704406f, 0.428571f, 0.285714f, 		},
	{	0.000000f, 0.900969f, 0.433884f, 0.500000f, 0.142857f, 			},
	{	0.000000f, 0.623490f, 0.781832f, 0.500000f, 0.285714f, 			},
	{	0.188255f, 0.900969f, 0.390916f, 0.571429f, 0.142857f, 			},
	{	0.339224f, 0.623490f, 0.704406f, 0.571429f, 0.285714f, 			},
	{	0.339224f, 0.900969f, 0.270522f, 0.642857f, 0.142857f, 			},
	{	0.611261f, 0.623490f, 0.487464f, 0.642857f, 0.285714f, 			},
	{	0.423005f, 0.900969f, 0.096548f, 0.714286f, 0.142857f, 			},
	{	0.762229f, 0.623490f, 0.173973f, 0.714286f, 0.285714f, 			},
	{	0.423005f, 0.900969f, -0.096549f, 0.785714f, 0.142857f, 		},
	{	0.762229f, 0.623490f, -0.173974f, 0.785714f, 0.285714f, 		},
	{	0.339224f, 0.900969f, -0.270522f, 0.857143f, 0.142857f, 		},
	{	0.611260f, 0.623490f, -0.487465f, 0.857143f, 0.285714f, 		},
	{	0.188255f, 0.900969f, -0.390916f, 0.928572f, 0.142857f, 		},
	{	0.339223f, 0.623490f, -0.704406f, 0.928572f, 0.285714f, 		},
	{	-0.000000f, 0.900969f, -0.433884f, 1.000000f, 0.142857f, 		},
	{	-0.000000f, 0.623490f, -0.781832f, 1.000000f, 0.285714f, 		},
	{	-0.000000f, 0.623490f, -0.781832f, -0.000000f, 0.285714f, 		},
	{	-0.423005f, 0.222521f, -0.878380f, 0.071429f, 0.428571f, 		},
	{	-0.000000f, 0.222521f, -0.974928f, -0.000000f, 0.428571f, 		},
	{	-0.762229f, 0.222521f, -0.607858f, 0.142857f, 0.428571f, 		},
	{	-0.950484f, 0.222521f, -0.216942f, 0.214286f, 0.428571f, 		},
	{	-0.950484f, 0.222521f, 0.216942f, 0.285714f, 0.428571f, 		},
	{	-0.762229f, 0.222521f, 0.607858f, 0.357143f, 0.428571f, 		},
	{	-0.423006f, 0.222521f, 0.878380f, 0.428571f, 0.428571f, 		},
	{	0.000000f, 0.222521f, 0.974928f, 0.500000f, 0.428571f, 			},
	{	0.423006f, 0.222521f, 0.878380f, 0.571429f, 0.428571f, 			},
	{	0.762230f, 0.222521f, 0.607857f, 0.642857f, 0.428571f, 			},
	{	0.950485f, 0.222521f, 0.216941f, 0.714286f, 0.428571f, 			},
	{	0.950484f, 0.222521f, -0.216943f, 0.785714f, 0.428571f, 		},
	{	0.762229f, 0.222521f, -0.607858f, 0.857143f, 0.428571f, 		},
	{	0.423004f, 0.222521f, -0.878380f, 0.928572f, 0.428571f, 		},
	{	-0.000000f, 0.222521f, -0.974928f, 1.000000f, 0.428571f, 		},
	{	-0.000000f, 0.222521f, -0.974928f, -0.000000f, 0.428571f, 		},
	{	-0.423005f, -0.222521f, -0.878380f, 0.071429f, 0.571429f, 		},
	{	0.000000f, -0.222521f, -0.974928f, -0.000000f, 0.571429f, 		},
	{	-0.762229f, -0.222521f, -0.607858f, 0.142857f, 0.571429f, 		},
	{	-0.950484f, -0.222521f, -0.216942f, 0.214286f, 0.571429f, 		},
	{	-0.950485f, -0.222521f, 0.216942f, 0.285714f, 0.571429f, 		},
	{	-0.762229f, -0.222521f, 0.607857f, 0.357143f, 0.571429f, 		},
	{	-0.423006f, -0.222521f, 0.878380f, 0.428571f, 0.571429f, 		},
	{	0.000000f, -0.222521f, 0.974928f, 0.500000f, 0.571429f, 		},
	{	0.423006f, -0.222521f, 0.878380f, 0.571429f, 0.571429f, 		},
	{	0.762229f, -0.222521f, 0.607857f, 0.642857f, 0.571429f, 		},
	{	0.950485f, -0.222521f, 0.216942f, 0.714286f, 0.571429f, 		},
	{	0.950484f, -0.222521f, -0.216942f, 0.785714f, 0.571429f, 		},
	{	0.762229f, -0.222521f, -0.607858f, 0.857143f, 0.571429f, 		},
	{	0.423005f, -0.222521f, -0.878380f, 0.928572f, 0.571429f, 		},
	{	0.000000f, -0.222521f, -0.974928f, 1.000000f, 0.571429f, 		},
	{	-0.042688f, 0.995148f, -0.088642f, 0.071429f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.071429f, 0.002524f, 		},
	{	-0.000000f, 0.995148f, -0.098385f, -0.000000f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, -0.000000f, 0.002524f, 		},
	{	-0.076920f, 0.995148f, -0.061342f, 0.142857f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.142857f, 0.002524f, 		},
	{	-0.095918f, 0.995148f, -0.021893f, 0.214286f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.214286f, 0.002524f, 		},
	{	-0.095918f, 0.995148f, 0.021893f, 0.285714f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.285714f, 0.002524f, 		},
	{	-0.076920f, 0.995148f, 0.061342f, 0.357143f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.357143f, 0.002524f, 		},
	{	-0.042688f, 0.995148f, 0.088641f, 0.428571f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.428571f, 0.002524f, 		},
	{	-0.000000f, 0.995148f, 0.098385f, 0.500000f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.500000f, 0.002524f, 		},
	{	0.042687f, 0.995148f, 0.088641f, 0.571429f, 0.044269f, 			},
	{	-0.000000f, 1.000000f, -0.000000f, 0.571429f, 0.002524f, 		},
	{	0.076920f, 0.995148f, 0.061342f, 0.642857f, 0.044269f, 			},
	{	-0.000000f, 1.000000f, -0.000000f, 0.642857f, 0.002524f, 		},
	{	0.095918f, 0.995148f, 0.021893f, 0.714286f, 0.044269f, 			},
	{	-0.000000f, 1.000000f, -0.000000f, 0.714286f, 0.002524f, 		},
	{	0.095918f, 0.995148f, -0.021893f, 0.785714f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.785714f, 0.002524f, 		},
	{	0.076920f, 0.995148f, -0.061342f, 0.857143f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.857143f, 0.002524f, 		},
	{	0.042687f, 0.995148f, -0.088642f, 0.928572f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 0.928572f, 0.002524f, 		},
	{	-0.000000f, 0.995148f, -0.098385f, 1.000000f, 0.044269f, 		},
	{	-0.000000f, 1.000000f, -0.000000f, 1.000000f, 0.002524f, 		},
	{	-0.000000f, 0.900969f, -0.433884f, -0.000000f, 0.142857f, 		},
	{	-0.000000f, 0.973605f, -0.228240f, -0.000000f, 0.074763f, 		},
	{	-0.099030f, 0.973605f, -0.205637f, 0.071429f, 0.074763f, 		},
	{	-0.178445f, 0.973605f, -0.142305f, 0.142857f, 0.074763f, 		},
	{	-0.222517f, 0.973605f, -0.050788f, 0.214286f, 0.074763f, 		},
	{	-0.222517f, 0.973605f, 0.050788f, 0.285714f, 0.074763f, 		},
	{	-0.178445f, 0.973605f, 0.142305f, 0.357143f, 0.074763f, 		},
	{	-0.099030f, 0.973605f, 0.205637f, 0.428571f, 0.074763f, 		},
	{	-0.000000f, 0.973605f, 0.228240f, 0.500000f, 0.074763f, 		},
	{	0.099030f, 0.973605f, 0.205637f, 0.571429f, 0.074763f, 			},
	{	0.178445f, 0.973605f, 0.142305f, 0.642857f, 0.074763f, 			},
	{	0.222517f, 0.973605f, 0.050788f, 0.714286f, 0.074763f, 			},
	{	0.222517f, 0.973605f, -0.050788f, 0.785714f, 0.074763f, 		},
	{	0.178445f, 0.973605f, -0.142305f, 0.857143f, 0.074763f, 		},
	{	0.099029f, 0.973605f, -0.205637f, 0.928572f, 0.074763f, 		},
	{	-0.000000f, 0.973605f, -0.228240f, 1.000000f, 0.074763f, 		},
};

const unsigned short indices[] =
{
	0, 1, 2, 
	3, 2, 1, 
	4, 0, 5, 
	2, 5, 0, 
	6, 4, 7, 
	5, 7, 4, 
	8, 6, 9, 
	7, 9, 6, 
	10, 8, 11, 
	9, 11, 8, 
	12, 10, 13, 
	11, 13, 10, 
	14, 12, 15, 
	13, 15, 12, 
	16, 14, 17, 
	15, 17, 14, 
	18, 16, 19, 
	17, 19, 16, 
	20, 18, 21, 
	19, 21, 18, 
	22, 20, 23, 
	21, 23, 20, 
	24, 22, 25, 
	23, 25, 22, 
	26, 24, 27, 
	25, 27, 24, 
	28, 26, 29, 
	27, 29, 26, 
	2, 30, 31, 
	32, 31, 30, 
	5, 2, 33, 
	31, 33, 2, 
	7, 5, 34, 
	33, 34, 5, 
	9, 7, 35, 
	34, 35, 7, 
	11, 9, 36, 
	35, 36, 9, 
	13, 11, 37, 
	36, 37, 11, 
	15, 13, 38, 
	37, 38, 13, 
	17, 15, 39, 
	38, 39, 15, 
	19, 17, 40, 
	39, 40, 17, 
	21, 19, 41, 
	40, 41, 19, 
	23, 21, 42, 
	41, 42, 21, 
	25, 23, 43, 
	42, 43, 23, 
	27, 25, 44, 
	43, 44, 25, 
	29, 27, 45, 
	44, 45, 27, 
	46, 47, 48, 
	49, 48, 47, 
	50, 51, 46, 
	47, 46, 51, 
	52, 53, 50, 
	51, 50, 53, 
	54, 55, 52, 
	53, 52, 55, 
	56, 57, 54, 
	55, 54, 57, 
	58, 59, 56, 
	57, 56, 59, 
	60, 61, 58, 
	59, 58, 61, 
	62, 63, 60, 
	61, 60, 63, 
	64, 65, 62, 
	63, 62, 65, 
	66, 67, 64, 
	65, 64, 67, 
	68, 69, 66, 
	67, 66, 69, 
	70, 71, 68, 
	69, 68, 71, 
	72, 73, 70, 
	71, 70, 73, 
	74, 75, 72, 
	73, 72, 75, 
	76, 0, 77, 
	78, 77, 0, 
	0, 4, 78, 
	79, 78, 4, 
	4, 6, 79, 
	80, 79, 6, 
	6, 8, 80, 
	81, 80, 8, 
	8, 10, 81, 
	82, 81, 10, 
	10, 12, 82, 
	83, 82, 12, 
	12, 14, 83, 
	84, 83, 14, 
	14, 16, 84, 
	85, 84, 16, 
	16, 18, 85, 
	86, 85, 18, 
	18, 20, 86, 
	87, 86, 20, 
	20, 22, 87, 
	88, 87, 22, 
	22, 24, 88, 
	89, 88, 24, 
	24, 26, 89, 
	90, 89, 26, 
	26, 28, 90, 
	91, 90, 28, 
	77, 78, 48, 
	46, 48, 78, 
	78, 79, 46, 
	50, 46, 79, 
	79, 80, 50, 
	52, 50, 80, 
	80, 81, 52, 
	54, 52, 81, 
	81, 82, 54, 
	56, 54, 82, 
	82, 83, 56, 
	58, 56, 83, 
	83, 84, 58, 
	60, 58, 84, 
	84, 85, 60, 
	62, 60, 85, 
	85, 86, 62, 
	64, 62, 86, 
	86, 87, 64, 
	66, 64, 87, 
	87, 88, 66, 
	68, 66, 88, 
	88, 89, 68, 
	70, 68, 89, 
	89, 90, 70, 
	72, 70, 90, 
	90, 91, 72, 
	74, 72, 91, 
	92, 93, 94, 
	95, 94, 93, 
	96, 92, 97, 
	94, 97, 92, 
	98, 96, 99, 
	97, 99, 96, 
	100, 98, 101, 
	99, 101, 98, 
	102, 100, 103, 
	101, 103, 100, 
	104, 102, 105, 
	103, 105, 102, 
	106, 104, 107, 
	105, 107, 104, 
	108, 106, 109, 
	107, 109, 106, 
	110, 108, 111, 
	109, 111, 108, 
	112, 110, 113, 
	111, 113, 110, 
	114, 112, 115, 
	113, 115, 112, 
	116, 114, 117, 
	115, 117, 114, 
	118, 116, 119, 
	117, 119, 116, 
	120, 118, 121, 
	119, 121, 118, 
	94, 122, 123, 
	124, 123, 122, 
	97, 94, 125, 
	123, 125, 94, 
	99, 97, 126, 
	125, 126, 97, 
	101, 99, 127, 
	126, 127, 99, 
	103, 101, 128, 
	127, 128, 101, 
	105, 103, 129, 
	128, 129, 103, 
	107, 105, 130, 
	129, 130, 105, 
	109, 107, 131, 
	130, 131, 107, 
	111, 109, 132, 
	131, 132, 109, 
	113, 111, 133, 
	132, 133, 111, 
	115, 113, 134, 
	133, 134, 113, 
	117, 115, 135, 
	134, 135, 115, 
	119, 117, 136, 
	135, 136, 117, 
	121, 119, 137, 
	136, 137, 119, 
	123, 138, 139, 
	140, 139, 138, 
	125, 123, 141, 
	139, 141, 123, 
	126, 125, 142, 
	141, 142, 125, 
	127, 126, 143, 
	142, 143, 126, 
	128, 127, 144, 
	143, 144, 127, 
	129, 128, 145, 
	144, 145, 128, 
	130, 129, 146, 
	145, 146, 129, 
	131, 130, 147, 
	146, 147, 130, 
	132, 131, 148, 
	147, 148, 131, 
	133, 132, 149, 
	148, 149, 132, 
	134, 133, 150, 
	149, 150, 133, 
	135, 134, 151, 
	150, 151, 134, 
	136, 135, 152, 
	151, 152, 135, 
	137, 136, 153, 
	152, 153, 136, 
	154, 155, 156, 
	157, 156, 155, 
	158, 159, 154, 
	155, 154, 159, 
	160, 161, 158, 
	159, 158, 161, 
	162, 163, 160, 
	161, 160, 163, 
	164, 165, 162, 
	163, 162, 165, 
	166, 167, 164, 
	165, 164, 167, 
	168, 169, 166, 
	167, 166, 169, 
	170, 171, 168, 
	169, 168, 171, 
	172, 173, 170, 
	171, 170, 173, 
	174, 175, 172, 
	173, 172, 175, 
	176, 177, 174, 
	175, 174, 177, 
	178, 179, 176, 
	177, 176, 179, 
	180, 181, 178, 
	179, 178, 181, 
	182, 183, 180, 
	181, 180, 183, 
	184, 92, 185, 
	186, 185, 92, 
	92, 96, 186, 
	187, 186, 96, 
	96, 98, 187, 
	188, 187, 98, 
	98, 100, 188, 
	189, 188, 100, 
	100, 102, 189, 
	190, 189, 102, 
	102, 104, 190, 
	191, 190, 104, 
	104, 106, 191, 
	192, 191, 106, 
	106, 108, 192, 
	193, 192, 108, 
	108, 110, 193, 
	194, 193, 110, 
	110, 112, 194, 
	195, 194, 112, 
	112, 114, 195, 
	196, 195, 114, 
	114, 116, 196, 
	197, 196, 116, 
	116, 118, 197, 
	198, 197, 118, 
	118, 120, 198, 
	199, 198, 120, 
	185, 186, 156, 
	154, 156, 186, 
	186, 187, 154, 
	158, 154, 187, 
	187, 188, 158, 
	160, 158, 188, 
	188, 189, 160, 
	162, 160, 189, 
	189, 190, 162, 
	164, 162, 190, 
	190, 191, 164, 
	166, 164, 191, 
	191, 192, 166, 
	168, 166, 192, 
	192, 193, 168, 
	170, 168, 193, 
	193, 194, 170, 
	172, 170, 194, 
	194, 195, 172, 
	174, 172, 195, 
	195, 196, 174, 
	176, 174, 196, 
	196, 197, 176, 
	178, 176, 197, 
	197, 198, 178, 
	180, 178, 198, 
	198, 199, 180, 
	182, 180, 199, 
};

SkySphere::SkySphere(Component::Owner &owner_)
: Graphics3Component(owner_)
, vertexBuffer(0)
, indexBuffer(0)
{
	setShaderPath(ResourcePath("default/defaultSkyShader", "vfx")		);
	setTexturePath(ResourcePath("default/defaultSkyTexture", "texture")	);

	Vector<GXVertexFormat> formats;
	formats.push() = GXVertexFormat::FLOAT3;
	formats.push() = GXVertexFormat::FLOAT2;

	vertexBuffer = new GXVertexBuffer(200, formats);
	vertexBuffer->setVertices<Vertex>(&vertices[0], 200);

	indexBuffer = new GXIndexBuffer(308*3);
	indexBuffer->setIndices(indices, 308*3);
}

SkySphere::~SkySphere()
{
	if(vertexBuffer)
	{
		delete vertexBuffer;		
		vertexBuffer	= 0;
	}
	if(indexBuffer)
	{
		delete indexBuffer;		
		indexBuffer	= 0;
	}
}

bool SkySphere::onConstruct()
{
	if( !visualEffect.construct( getShaderPath().getPath()) )
		return false;
	
	if( !texture.construct( getTexturePath().getPath() ) )
		return false;

	int diffuseMapSamplerIdx = visualEffect.getTextureHandle("diffuseMapSampler");
	visualEffect.setTexture(diffuseMapSamplerIdx, &texture);
	
	return true;
}

void SkySphere::onStart()
{
}

void SkySphere::onUpdate(float dt)
{
}

void SkySphere::onPause()
{
}

void SkySphere::onResume()
{
}

void SkySphere::onStop()
{
}

void SkySphere::onDestruct()
{
	visualEffect.destruct();
	texture.destruct();
}

void SkySphere::onDebugRender(IComponentDebugRenderer &debugRenderer)
{
	const Matrix4 &temp = debugRenderer.getViewTransform().Inverse();
	
	Matrix4 transform;
	transform.initIdentity();
	transform[0][3] = temp[0][3];
	transform[1][3] = temp[1][3];
	transform[2][3] = temp[2][3];

	debugRenderer.renderWireSphere(transform, ColorRGBA(0, 0.5, 0.5, 1), 1000, 10, 10);
}